[{"/Users/scottking/code/re-meet/web/src/pages/CalendarPage.jsx":"1","/Users/scottking/code/re-meet/web/src/Routes.jsx":"2","/Users/scottking/code/re-meet/web/src/App.js":"3","/Users/scottking/code/re-meet/web/src/reportWebVitals.js":"4","/Users/scottking/code/re-meet/web/src/pages/Home.jsx":"5","/Users/scottking/code/re-meet/web/src/index.js":"6","/Users/scottking/code/re-meet/web/src/firebase/config.js":"7","/Users/scottking/code/re-meet/web/src/firebase/firebase.js":"8","/Users/scottking/code/re-meet/web/src/components/Settings.jsx":"9","/Users/scottking/code/re-meet/web/src/pages/Login.js":"10","/Users/scottking/code/re-meet/web/src/hooks/useWindowDimensions.js":"11","/Users/scottking/code/re-meet/web/src/hooks/useUserData.js":"12","/Users/scottking/code/re-meet/web/src/components/GroupSettings.jsx":"13"},{"size":14969,"mtime":1610852674389,"results":"14","hashOfConfig":"15"},{"size":587,"mtime":1610851010650,"results":"16","hashOfConfig":"15"},{"size":193,"mtime":1610840687211,"results":"17","hashOfConfig":"15"},{"size":362,"mtime":1610822442250,"results":"18","hashOfConfig":"15"},{"size":587,"mtime":1610851792212,"results":"19","hashOfConfig":"15"},{"size":500,"mtime":1610831860725,"results":"20","hashOfConfig":"15"},{"size":340,"mtime":1610830741223,"results":"21","hashOfConfig":"15"},{"size":257,"mtime":1610830749003,"results":"22","hashOfConfig":"15"},{"size":5591,"mtime":1610849728318,"results":"23","hashOfConfig":"15"},{"size":3367,"mtime":1610841796925,"results":"24","hashOfConfig":"15"},{"size":487,"mtime":1610841383168,"results":"25","hashOfConfig":"15"},{"size":972,"mtime":1610849528822,"results":"26","hashOfConfig":"15"},{"size":2971,"mtime":1610852667410,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"10evr8z",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/scottking/code/re-meet/web/src/pages/CalendarPage.jsx",["57","58","59","60","61","62","63","64","65"],"import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport { Card, IconButton, Typography, Button } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport firebase from \"../firebase/firebase\";\n\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport PeopleIcon from \"@material-ui/icons/People\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport clsx from \"clsx\";\n\nimport { deepOrange, deepPurple } from \"@material-ui/core/colors\";\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport { GroupSettings } from \"../components/GroupSettings\";\nimport { Settings } from \"../components/Settings\";\nimport { useHistory } from \"react-router-dom\";\nimport { useUserData } from \"../hooks/useUserData\";\n\nconst drawerWidth = 70;\nconst drawerWidth2 = 200;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    backgroundColor: \"white\",\n  },\n  appBar2: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer2: {\n    width: drawerWidth2,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerPaper2: {\n    width: drawerWidth2,\n  },\n  // necessary for content to be below app bar\n  toolbar2: theme.mixins.toolbar,\n\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth2}px)`,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginRight: drawerWidth2,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawer2: {\n    width: drawerWidth2,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-start\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    // marginRight: -drawerWidth,\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n}));\n\nconst groups = [\n  {\n    id: 12,\n    name: \"Team Moon Stonks\",\n    icon: \"ben.jpg\",\n    members: [\"steven@gmail.com\", \"scott@gmail.com\"],\n  },\n  {\n    id: 34,\n    name: \"Other team\",\n    icon: \"ben.jpg\",\n    members: [\"scott@gmail.com\", \"brenden@gmail.com\"],\n  },\n];\n\nconst colorMap = {\n  0: \"blue\",\n  1: \"red\",\n  2: \"green\",\n  3: \"orange\",\n  4: \"yellow\",\n  5: \"purple\",\n};\n\n// groups\n//   .find((group) => group.id === groupId)\n//   .members.reduce(async (result, member, index) => {\n//     let color = colorMap[index];\n//     const events = await db.get(member.events);\n//     const processed = events.map((event) => ({\n//       start: event.start,\n//       end: event.end,\n//       title: member.name,\n//       color,\n//     }));\n//     return [...result, ...processed];\n//   }, []);\n\nexport const CalendarPage = () => {\n  /**\n   * To access events: userData.events,\n   * To access groups: userData.groups\n   */\n  const userData = useUserData();\n\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [settings, setSettings] = React.useState(false); // this is react hook for brenden\n  const [joinOrCreate, setJoinOrCreate] = React.useState(false); // this is react hook for brenden\n  const [groupID, setGroupID] = React.useState(0); // Set group\n  const [calView, setCalView] = React.useState(\"timeGridWeek\");\n  const [events, setEvents] = React.useState([]);\n\n  const history = useHistory();\n\n  const classes = useStyles();\n\n  let calendarRef = React.useRef();\n\n  const handleCalViewChange = (event) => {\n    setCalView(event.target.value);\n  };\n\n  useEffect(() => {\n    let calendarApi = calendarRef.current.getApi();\n    calendarApi.changeView(calView);\n  }, [calView]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleLogout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => history.push(\"/\"))\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    if (userData.groups.length) {\n      setGroupID(userData.groups[0].id);\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    const processData = async () => {\n      if (userData.groups.length) {\n        const db = firebase.firestore();\n\n        const results = await userData.groups\n          .find((group) => group.id === groupID)\n          .members.forEach(async (member, index) => {\n            let color = colorMap[index];\n            const userRef = db.collection(\"profiles\").doc(member);\n            const res = await userRef.get();\n            const userEvents = res.data().events;\n            const processed = userEvents.map((event) => ({\n              start: event.start,\n              end: event.end,\n              title: res.data().name,\n              color,\n            }));\n            return processed;\n          });\n\n        return results;\n      } else {\n        return [];\n      }\n    };\n\n    if (groupID) {\n      (async () => {\n        const res = await processData();\n        setEvents([...events, ...res])\n      })();\n    }\n  }, [groupID, userData]);\n\n  useEffect(() => {\n    console.log(events);\n  }, [events]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            {settings ? \"Settings\" : \"Calendar\"}\n          </Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n            className={clsx(open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer2}\n        variant=\"permanent\"\n        style={{ width: drawerWidth }}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar2} />\n        <Divider />\n        <Tooltip title=\"User Settings\" arrow placement=\"right\">\n          <Button\n            onClick={() => {\n              console.log(`i clicked on user settings`);\n              // setGroup(\"settings\");\n              setSettings(true);\n              setJoinOrCreate(false);\n            }}\n          >\n            <HomeIcon fontSize=\"large\" />\n          </Button>\n        </Tooltip>\n        <Divider />\n        <List>\n          {groups.map((\n            text,\n            index // replace groups with userData.groups\n          ) => (\n            <Tooltip title={text.name} arrow placement=\"right\">\n              <Button\n                onClick={() => {\n                  console.log(`i clicked ${text.id}`);\n                  setGroupID(text.id);\n                  setSettings(false);\n                  setJoinOrCreate(false);\n                }}\n              >\n                <Avatar\n                  alt=\"Remy Sharp\"\n                  src=\"https://i.imgur.com/RTE1I5f.png\"\n                />\n              </Button>\n            </Tooltip>\n          ))}\n        </List>\n        <Divider />\n        <Tooltip title=\"Add New Group\" arrow placement=\"right\">\n          <Button\n            onClick={() => {\n              console.log(`i clicked on add a new group button`);\n              // setGroup(\"settings\");\n              setSettings(false); // add a new group button and set settings in this onClick method\n              setJoinOrCreate(true);\n            }}\n          >\n            <AddCircleOutlineIcon fontSize=\"large\" />\n          </Button>\n        </Tooltip>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.content]: open,\n        })}\n      >\n        <div className={classes.toolbar2} />\n\n        <div>\n          <Grid container>\n            <Grid item xs={7}>\n              <Typography>Calendar</Typography>\n            </Grid>\n            <Grid item xs={5} direction=\"row\">\n              {!settings && !joinOrCreate && (\n                <span>\n                  <FormControl variant=\"standard\">\n                    <InputLabel htmlFor=\"filled-age-native-simple\">\n                      Set View\n                    </InputLabel>\n                    <Select\n                      id=\"calViewSelect\"\n                      value={calView}\n                      onChange={handleCalViewChange}\n                    >\n                      <MenuItem value={\"timeGridWeek\"}>Time Grid Week</MenuItem>\n                      <MenuItem value={\"dayGridMonth\"}>Day Grid Month</MenuItem>\n                      <MenuItem value={\"dayGridWeek\"}>Day Grid Week</MenuItem>\n                    </Select>\n                  </FormControl>\n                </span>\n              )}\n            </Grid>\n          </Grid>\n          {settings || joinOrCreate ? (\n            settings ? (\n              <Settings />\n            ) : (\n              <GroupSettings />\n            )\n          ) : (\n            <FullCalendar\n              ref={calendarRef}\n              plugins={[timeGridPlugin, dayGridPlugin]}\n              initialView={calView} // dayGridMonth, dayGridWeek, timeGridWeek\n              nowIndicator={true}\n              weekends={true}\n              // events= 'https://fullcalendar.io/demo-events.json'\n              events={[\n                {\n                  title: \"Steven\",\n                  start: \"2021-01-15T08:00:00.000\",\n                  end: \"2021-01-15T12:00:00.000\",\n                  backgroundColor: \"red\",\n                },\n                {\n                  title: \"Ben\",\n                  start: \"2021-01-15T08:00:00.000\",\n                  end: \"2021-01-15T11:00:00.000\",\n                  backgroundColor: \"blue\",\n                },\n                {\n                  title: \"Scott\",\n                  start: \"2021-01-15T01:00:00.000\",\n                  end: \"2021-01-15T15:00:00.000\",\n                  backgroundColor: \"green\",\n                },\n                {\n                  title: \"Brenden\",\n                  start: \"2021-01-15T08:00:00.000\",\n                  end: \"2021-01-15T16:00:00.000\",\n                  backgroundColor: \"orange\",\n                },\n              ]}\n            />\n          )}\n        </div>\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper2,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n          \n  \n        <Tooltip title=\"personAdd\" arrow placement=\"left\">\n          <IconButton\n            color=\"inherit\"\n            edge=\"end\"\n            onClick={() => {\n              console.log(\"add a person lol\");\n            }}\n          >\n            <PersonAddIcon /> <Typography>Add Member</Typography>\n          </IconButton>\n        </Tooltip>\n\n        <Tooltip title=\"manage Group\" arrow placement=\"left\">\n          <IconButton\n            color=\"inherit\"\n            edge=\"end\"\n            onClick={() => {\n              console.log(\"manageGroup\");\n            }}\n          >\n            <PeopleIcon /> <Typography>Manage Group</Typography>\n          </IconButton>\n        </Tooltip>\n\n        <Divider />\n        <List>\n          {[\"Ben\", \"Brenden\", \"Scott\", \"Steven\"].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>\n                <Avatar className={classes.orange}>{text}</Avatar>\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <Grid container>\n          <Grid item direction=\"row\">\n            <Avatar alt=\"Remy Sharp\" src=\"https://i.imgur.com/OKDYTzw.png\" />\n          </Grid>\n          <Grid item direction=\"row\">\n            {\" \"}\n            <Typography>Name #1234</Typography>\n            <Grid item direction=\"row\">\n              {\" \"}\n              <SettingsIcon />{\" \"}\n              <Tooltip title=\"Logout\" arrow placement=\"top\">\n                <IconButton color=\"inherit\" edge=\"end\" onClick={handleLogout}>\n                  <PowerSettingsNewIcon />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>{\" \"}\n        </Grid>\n      </Drawer>\n    </div>\n  );\n};\n","/Users/scottking/code/re-meet/web/src/Routes.jsx",["66"],"/Users/scottking/code/re-meet/web/src/App.js",[],"/Users/scottking/code/re-meet/web/src/reportWebVitals.js",[],"/Users/scottking/code/re-meet/web/src/pages/Home.jsx",[],"/Users/scottking/code/re-meet/web/src/index.js",[],["67","68"],"/Users/scottking/code/re-meet/web/src/firebase/config.js",[],"/Users/scottking/code/re-meet/web/src/firebase/firebase.js",[],"/Users/scottking/code/re-meet/web/src/components/Settings.jsx",["69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\n\nimport {\n  Avatar,\n  Breadcrumbs as MuiBreadcrumbs,\n  Box,\n  Button,\n  Card as MuiCard,\n  CardContent,\n  Divider as MuiDivider,\n  FormControl as MuiFormControl,\n  Grid,\n  Input,\n  InputLabel,\n  Link,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { spacing } from \"@material-ui/system\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nconst NavLink = React.forwardRef((props, ref) => (\n  <RouterNavLink innerRef={ref} {...props} />\n));\n\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\n\nconst Card = styled(MuiCard)(spacing);\n\nconst Divider = styled(MuiDivider)(spacing);\n\nconst FormControl = styled(MuiFormControl)(spacing);\n\nconst BigAvatar = styled(Avatar)`\n  width: 120px;\n  height: 120px;\n`;\n\nconst Spacer = styled.div(spacing);\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nfunction Details(props) {\n  return (\n    <Card mb={6}>\n      <Grid container direction=\"column\">\n        <Grid\n          item\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Account\n            </Typography>\n            <Avatar\n              alt=\"Lucy Lavender\"\n              src={\"https://i.imgur.com/mHCDTjW.png\"}\n              style={{ width: 100, height: 100 }}\n            />\n            <Spacer mb={4} />\n\n            <Typography variant=\"body2\" component=\"div\" gutterBottom>\n              <Box fontWeight=\"fontWeightMedium\">\n                {props.firstName ? props.firstName : \"\"}{\" \"}\n                {props.lastName ? props.lastName : \"\"}\n              </Box>\n              <Box fontWeight=\"fontWeightRegular\">\n                {props.email ? props.email : \"email\"}\n              </Box>\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n\nfunction Personal(props) {\n  const handleClick = () => {\n    const user = {\n      firstName: props.firstName,\n      lastName: props.lastName,\n      email: props.email,\n    };\n  };\n\n  return (\n    <Card mb={6}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Information\n        </Typography>\n\n        <Grid container spacing={6}>\n          <Grid item md={6}>\n            <FormControl fullWidth mb={3}>\n              <InputLabel htmlFor=\"name\">First name</InputLabel>\n              <Input\n                id=\"name\"\n                value={props.firstName}\n                placeholder=\"First Name\"\n              />\n            </FormControl>\n          </Grid>\n          <Grid item md={6}>\n            <FormControl fullWidth mb={3}>\n              <InputLabel htmlFor=\"name\">Last name</InputLabel>\n              <Input id=\"name\" value={props.lastName} placeholder=\"Last name\" />\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Spacer mb={2} />\n        <FormControl fullWidth mb={3}>\n          <InputLabel htmlFor=\"email\">Email</InputLabel>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            value={props.email}\n            placeholder=\"Email\"\n          />\n        </FormControl>\n        <Spacer mb={6} />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n          Save changes\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction Theme(props) {\n  const [value, setValue] = React.useState(\"female\");\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Card mb={6}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Theme\n        </Typography>\n\n        <Centered>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              aria-label=\"theme\"\n              name=\"theme1\"\n              value={value}\n              onChange={handleChange}\n            >\n              <FormControlLabel\n                value=\"light theme\"\n                control={<Radio color=\"primary\" />}\n                label=\"Light\"\n              />\n              <FormControlLabel\n                value=\"dark theme\"\n                control={<Radio \n                    color=\"primary\" />}\n                label=\"Dark\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Centered>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport const Settings = () => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [picture, setPicture] = useState(\"\");\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={6}>\n        <Grid item xs={12} lg={12} xl={3}>\n          <Details\n            firstName={firstName}\n            lastName={lastName}\n            email={email}\n            picture={picture}\n          />\n        </Grid>\n        <Grid item xs={12} xl={9}>\n          <Personal\n            firstName={firstName}\n            lastName={lastName}\n            email={email}\n            onChangeFirstName={setFirstName}\n            onChangeLastName={setLastName}\n            onChangeEmail={setEmail}\n          />\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n      <Theme />\n    </React.Fragment>\n  );\n};\n","/Users/scottking/code/re-meet/web/src/pages/Login.js",[],"/Users/scottking/code/re-meet/web/src/hooks/useWindowDimensions.js",[],"/Users/scottking/code/re-meet/web/src/hooks/useUserData.js",[],"/Users/scottking/code/re-meet/web/src/components/GroupSettings.jsx",["81","82","83","84","85","86","87","88","89"],{"ruleId":"90","severity":1,"message":"91","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"94","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"95","line":4,"column":8,"nodeType":"92","messageId":"93","endLine":4,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":26,"column":8,"nodeType":"92","messageId":"93","endLine":26,"endColumn":17},{"ruleId":"90","severity":1,"message":"97","line":27,"column":8,"nodeType":"92","messageId":"93","endLine":27,"endColumn":16},{"ruleId":"90","severity":1,"message":"98","line":36,"column":8,"nodeType":"92","messageId":"93","endLine":36,"endColumn":22},{"ruleId":"99","severity":1,"message":"100","line":99,"column":3,"nodeType":"101","messageId":"102","endLine":99,"endColumn":10},{"ruleId":"99","severity":1,"message":"103","line":103,"column":3,"nodeType":"101","messageId":"102","endLine":103,"endColumn":14},{"ruleId":"104","severity":1,"message":"105","line":263,"column":6,"nodeType":"106","endLine":263,"endColumn":25,"suggestions":"107"},{"ruleId":"90","severity":1,"message":"108","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":19},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"90","severity":1,"message":"113","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"114","line":17,"column":3,"nodeType":"92","messageId":"93","endLine":17,"endColumn":7},{"ruleId":"90","severity":1,"message":"115","line":18,"column":3,"nodeType":"92","messageId":"93","endLine":18,"endColumn":7},{"ruleId":"90","severity":1,"message":"116","line":19,"column":3,"nodeType":"92","messageId":"93","endLine":19,"endColumn":11},{"ruleId":"90","severity":1,"message":"117","line":20,"column":3,"nodeType":"92","messageId":"93","endLine":20,"endColumn":15},{"ruleId":"90","severity":1,"message":"118","line":28,"column":8,"nodeType":"92","messageId":"93","endLine":28,"endColumn":17},{"ruleId":"90","severity":1,"message":"119","line":30,"column":7,"nodeType":"92","messageId":"93","endLine":30,"endColumn":14},{"ruleId":"90","severity":1,"message":"120","line":34,"column":7,"nodeType":"92","messageId":"93","endLine":34,"endColumn":18},{"ruleId":"90","severity":1,"message":"121","line":38,"column":7,"nodeType":"92","messageId":"93","endLine":38,"endColumn":14},{"ruleId":"90","severity":1,"message":"122","line":42,"column":7,"nodeType":"92","messageId":"93","endLine":42,"endColumn":16},{"ruleId":"90","severity":1,"message":"123","line":95,"column":11,"nodeType":"92","messageId":"93","endLine":95,"endColumn":15},{"ruleId":"90","severity":1,"message":"124","line":191,"column":19,"nodeType":"92","messageId":"93","endLine":191,"endColumn":29},{"ruleId":"90","severity":1,"message":"125","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"126","line":4,"column":8,"nodeType":"92","messageId":"93","endLine":4,"endColumn":18},{"ruleId":"90","severity":1,"message":"94","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":12},{"ruleId":"90","severity":1,"message":"127","line":6,"column":8,"nodeType":"92","messageId":"93","endLine":6,"endColumn":19},{"ruleId":"90","severity":1,"message":"128","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":19},{"ruleId":"90","severity":1,"message":"129","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":17},{"ruleId":"90","severity":1,"message":"130","line":11,"column":8,"nodeType":"92","messageId":"93","endLine":11,"endColumn":15},{"ruleId":"90","severity":1,"message":"114","line":15,"column":8,"nodeType":"92","messageId":"93","endLine":15,"endColumn":12},{"ruleId":"90","severity":1,"message":"131","line":49,"column":7,"nodeType":"92","messageId":"93","endLine":49,"endColumn":12},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'styled' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'FormHelperText' is defined but never used.","no-dupe-keys","Duplicate key 'drawer2'.","ObjectExpression","unexpected","Duplicate key 'drawerPaper'.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'events'. Either include it or remove the dependency array. You can also do a functional update 'setEvents(e => ...)' if you only need 'events' in the 'setEvents' call.","ArrayExpression",["132"],"'FC' is defined but never used.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'useEffect' is defined but never used.","'Link' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'FormLabel' is defined but never used.","'NavLink' is assigned a value but never used.","'Breadcrumbs' is assigned a value but never used.","'Divider' is assigned a value but never used.","'BigAvatar' is assigned a value but never used.","'user' is assigned a value but never used.","'setPicture' is assigned a value but never used.","'AppBar' is defined but never used.","'CameraIcon' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Toolbar' is defined but never used.","'cards' is assigned a value but never used.",{"desc":"135","fix":"136"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [events, groupID, userData]",{"range":"137","text":"138"},[7445,7464],"[events, groupID, userData]"]